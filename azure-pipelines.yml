trigger:
- '*'
variables:
  buildConfiguration: 'Release'
  releaseBranchName: 'release-pipeline-jy'

  # Plannification d'un declenchement automatique de la chaine de Build pour un
schedules:
  - cron: '0 3 * * *'
    displayName: Deploy every day at 3.0 AM GMT
    branches:
      include:
        - release-pipeline-jy
    #always: false

stages:
  - stage: 'Build'
    displayName: 'Build the web application'
    variables:     
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '3.1.300'
    jobs:
      - job: 'build' 
        displayName: 'Job de Build'
        pool:        
          vmImage: 'ubuntu-18.04'
          demands:
            - npm
        steps:
        - task: UseDotNet@2
          displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
          inputs:
             version: '$(dotnetSdkVersion)'

        - task: Npm@1
          displayName: 'Run npm install'
          inputs:
             verbose: false

        - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
          displayName: 'Compile Sass assets'

        - task: gulp@1
          displayName: 'Run gulp tasks'

        - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
          displayName: 'Write build info'
          workingDirectory: $(wwwrootDir)

        - task: DotNetCoreCLI@2
          displayName: 'Restore project dependencies'
          inputs:
              command: 'restore'
              projects: '**/*.csproj'

        - task: DotNetCoreCLI@2
          displayName: 'Build the project - $(buildConfiguration)'
          inputs:
             command: 'build'
             arguments: '--no-restore --configuration $(buildConfiguration)'
             projects: '**/*.csproj'

        - task: DotNetCoreCLI@2
          displayName: 'Publish the project - $(buildConfiguration)'
          inputs:
             command: 'publish'
             projects: '**/*.csproj'
             publishWebProjects: false
             arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
             zipAfterPublish: true

        - publish: '$(Build.ArtifactStagingDirectory)'
          artifact: drop
  - stage: 'Dev'
    displayName: 'Deploy DEV web application'
    dependsOn: Build
    condition: and (succeeded() , eq(variables['Build.SourceBranchName'],variables['releaseBranchName']) )
    jobs:
      - deployment: DeployWeb
        displayName: 'Deployment of Space Game web application'
        pool:
          vmImage: 'Ubuntu-18.04'
        environment: 'dev'
        variables:
          - group : Release
        strategy:
         runOnce:
           deploy:
             steps:
               - download: current
                 artifact: drop
               - task: AzureWebApp@1
                 displayName: 'Azure App Service Deploy : WebSite' 
                 inputs:
                   appType: webAppLinux
                   azureSubscription: 'Space-game-azurerm-connection'
                   appName: '$(webAppNameDEV)'
                   package: '$(Pipeline.Workspace)/drop/$(buildconfiguration)/*.zip'
  - stage: 'ASM'
    displayName: 'Deploy ASM web application'
    dependsOn: dev
    # condition: and (succeeded() , eq(variables['Build.SourceBranchName'],variables['releaseBranchName']) )
    jobs:
      - deployment: DeployWeb
        displayName: 'Deployment of Space Game web application'
        pool:
          vmImage: 'Ubuntu-18.04'
        environment: 'asm'
        variables:
          - group : Release
        strategy:
         runOnce:
          deploy:
            steps:
              - download: current
                artifact: drop
              - task: AzureWebApp@1
                displayName: 'Azure App Service Deploy : WebSite' 
                inputs:
                  appType: webAppLinux
                  azureSubscription: 'Space-game-azurerm-connection'
                  appName: '$(webAppNameASM)'
                  package: '$(Pipeline.Workspace)/drop/$(buildconfiguration)/*.zip'
   
  - stage: 'INT'
    displayName: 'Deploy INT web application'
    dependsOn: asm
    # condition: and (succeeded() , eq(variables['Build.Reason'],'Schedule') )
    jobs:
    - deployment: DeployWeb
      displayName: 'Deployment of Space Game web application'
      pool:
        vmImage: 'Ubuntu-18.04'
      environment: 'int'
      variables:
        - group : Release
      strategy:
        runOnce:
         deploy:
          steps:
            - download: current
              artifact: drop
            - task: AzureWebApp@1
              displayName: 'Azure App Service Deploy : WebSite' 
              inputs:
                appType: webAppLinux
                azureSubscription: 'Space-game-azurerm-connection'
                appName: '$(webAppNameINT)'
                package: '$(Pipeline.Workspace)/drop/$(buildconfiguration)/*.zip'

  - stage: 'UAT'
    displayName: 'Deploy UAT web application'
    dependsOn: int
    # condition: and (succeeded() , eq(variables['Build.SourceBranchName'],variables['releaseBranchName']) )
    jobs:
    - deployment: DeployWeb
      displayName: 'Deployment of Space Game web application'
      pool:
        vmImage: 'Ubuntu-18.04'
      environment: 'uat'
      variables:
        - group : Release
      strategy:
        runOnce:
         deploy:
          steps:
            - download: current
              artifact: drop
            - task: AzureWebApp@1
              displayName: 'Azure App Service Deploy : WebSite' 
              inputs:
                appType: webAppLinux
                azureSubscription: 'Space-game-azurerm-connection'
                appName: '$(webAppNameUAT)'
                package: '$(Pipeline.Workspace)/drop/$(buildconfiguration)/*.zip'

  # - stage: 'Test' jfjfj
  #   displayName: 'Deploy to the Test environment'
  #   condition: and(succeeded(), eq(variables['Build.Reason'], 'Schedule'))         
    
  