trigger:
- '*'

variables:
  buildConfiguration: 'Release'

schedules:
    - cron: '0 3 * * *'
      displayName: Deploy every day at 3.0 AM GMT
      branches:
        include:
          - release-pipeline-jy
      #always: false
  
stages:
    - stage: 'Build'
      displayName: 'Build the web application'
      variables:     
        wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
        dotnetSdkVersion: '3.1.300'
      jobs:
        - job: 'build' 
          displayName: 'Job Build web App'
          pool:        
            vmImage: 'ubuntu-18.04'
            demands:
              - npm
          steps:
          - task: UseDotNet@2
            displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
            inputs:
               version: '$(dotnetSdkVersion)'
  
          - task: Npm@1
            displayName: 'Run npm install'
            inputs:
               verbose: false
  
          - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
            displayName: 'Compile Sass assets'
  
          - task: gulp@1
            displayName: 'Run gulp tasks'
  
          - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
            displayName: 'Write build info'
            workingDirectory: $(wwwrootDir)
  
          - task: DotNetCoreCLI@2
            displayName: 'Restore project dependencies'
            inputs:
                command: 'restore'
                projects: '**/*.csproj'
  
          - task: DotNetCoreCLI@2
            displayName: 'Build the project - $(buildConfiguration)'
            inputs:
               command: 'build'
               arguments: '--no-restore --configuration $(buildConfiguration)'
               projects: '**/*.csproj'
  
          - task: DotNetCoreCLI@2
            displayName: 'Publish the project - $(buildConfiguration)'
            inputs:
               command: 'publish'
               projects: '**/*.csproj'
               publishWebProjects: false
               arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
               zipAfterPublish: true
  
          - publish: '$(Build.ArtifactStagingDirectory)'
            artifact: drop
        - job: 'BuildDacPac'
          pool: 
            vmImage: 'windows-2019'
          steps:
            # Restore project dependencies
            - task: DotNetCoreCLI@2
              displayName: 'Restore database projets dependencies'
              timeoutInMinutes: 120
              inputs:
                  command: restore
                  projects: '**/*.sqlproj'

            # Build Project with MS Build
            - task: VSBuild@1
              displayName: 'Build database projets with @MsBuild'
              timeoutInMinutes: 120
              inputs:
                  project: '**/*.sqlproj'
                
            # Copy Files to staging Directory
            - task: CopyFiles@2
              displayName: 'Copy database Files to Target Folder'
              timeoutInMinutes: 120
              inputs:   
                 Contents: 'Tailspin.SpaceGame.Database/bin/**/*.dacpac'
                 TargetFolder: '$(Build.StagingDirectory)'

            # Publish Artifact
            - task: PublishBuildArtifacts@1
              displayName: 'Publish Database Artifact'
              inputs:
                PathtoPublish: '$(Build.ArtifactStagingDirectory)'
                ArtifactName: dropDacpac
              condition: succeededOrFailed()

    - stage: 'DBAVerificationScript'
      displayName: 'script database schema changes'
      dependsOn: Build
      jobs:
        - deployment: DBAVerificationScript
          pool: 
            vmImage: 'windows-2019'
          variables:
            - group: Release
          environment: 'dbaVerificationScript'
          strategy: 
            runOnce:              
              deploy:   
                steps:
                 - download: current
                   artifact: dropDacpac
                   patterns: '**/*'
                 - task: SqlAzureDacpacDeployment@1
                   displayName: 'Generate Schema Script'
                   inputs:
                     azureConnectionType: 'ConnectedServiceNameARM' # Optional. Options: connectedServiceName, connectedServiceNameARM
                     #azureClassicSubscription: # Required when azureConnectionType == ConnectedServiceName
                     azureSubscription: 'Space-game-azurerm-connection' # Required when azureConnectionType == ConnectedServiceNameARM
                     authenticationType: 'server' # Options: server, aadAuthenticationPassword, aadAuthenticationIntegrated, connectionString
                     serverName: '$(servername).database.windows.net' # Required when authenticationType == Server || AuthenticationType == AadAuthenticationPassword || AuthenticationType == AadAuthenticationIntegrated
                     databaseName: '$(databasename)' # Required when authenticationType == Server || AuthenticationType == AadAuthenticationPassword || AuthenticationType == AadAuthenticationIntegrated
                     sqlUsername: '$(adminlogin)' # Required when authenticationType == Server
                     sqlPassword: '$(adminPassword)' # Required when authenticationType == Server
                     #aadSqlUsername: # Required when authenticationType == AadAuthenticationPassword
                     #aadSqlPassword: # Required when authenticationType == AadAuthenticationPassword
                     #connectionString: # Required when authenticationType == ConnectionString
                     deployType: 'DacpacTask' # Options: dacpacTask, sqlTask, inlineSqlTask
                     deploymentAction: 'script' # Required when deployType == DacpacTask. Options: publish, extract, export, import, script, driftReport, deployReport
                     dacpacFile: '$(Pipeline.Workspace)/dropDacpac/Tailspin.SpaceGame.Database/bin/Debug/Tailspin.SpaceGame.Database.dacpac' # Required when deploymentAction == Publish || DeploymentAction == Script || DeploymentAction == DeployReport
                     #bacpacFile: # Required when deploymentAction == Import
                     #sqlFile: # Required when deployType == SqlTask
                     #sqlInline: # Required when deployType == InlineSqlTask
                     #publishProfile: # Optional
                     #additionalArguments: # Optional
                     #sqlAdditionalArguments: # Optional
                     #inlineAdditionalArguments: # Optional
                     ipDetectionMethod: 'AutoDetect' # Options: autoDetect, iPAddressRange
                     #startIpAddress: # Required when ipDetectionMethod == IPAddressRange
                     #endIpAddress: # Required when ipDetectionMethod == IPAddressRange
                     #deleteFirewallRule: true # Optional

                 - task: PowerShell@2
                   displayName: 'Show Auto Generated SQl Script'
                   inputs:
                     targetType: inline
                     script: |
                       Write-Host "Auto Generated SQ Update Script"
                       Get-Content d:\a\1\s\GeneratedOutputFiles\$(databasename)_Script.sql  | foreach { Write-Output $_}
             
    - stage: 'DBAVerificationApply'
      displayName: 'Apply script database schema '
      dependsOn: DBAVerificationScript
      jobs:
      - deployment: DBAVerificationApply
        pool: 
          vmImage: 'windows-2019'
        variables:
          - group: Release
        environment: 'dbaVerificationApply'
        strategy: 
          runOnce:              
            deploy:   
              steps:
              - download: current
                artifact: dropDacpac
                patterns: '**/*'
              - task: SqlAzureDacpacDeployment@1
                displayName: 'Generate Schema Script'
                inputs:
                  azureConnectionType: 'ConnectedServiceNameARM' # Optional. Options: connectedServiceName, connectedServiceNameARM
                  #azureClassicSubscription: # Required when azureConnectionType == ConnectedServiceName
                  azureSubscription: 'Space-game-azurerm-connection' # Required when azureConnectionType == ConnectedServiceNameARM
                  authenticationType: 'server' # Options: server, aadAuthenticationPassword, aadAuthenticationIntegrated, connectionString
                  serverName: '$(servername).database.windows.net' # Required when authenticationType == Server || AuthenticationType == AadAuthenticationPassword || AuthenticationType == AadAuthenticationIntegrated
                  databaseName: '$(databasename)' # Required when authenticationType == Server || AuthenticationType == AadAuthenticationPassword || AuthenticationType == AadAuthenticationIntegrated
                  sqlUsername: '$(adminlogin)' # Required when authenticationType == Server
                  sqlPassword: '$(adminPassword)' # Required when authenticationType == Server
                  #aadSqlUsername: # Required when authenticationType == AadAuthenticationPassword
                  #aadSqlPassword: # Required when authenticationType == AadAuthenticationPassword
                  #connectionString: # Required when authenticationType == ConnectionString
                  deployType: 'DacpacTask' # Options: dacpacTask, sqlTask, inlineSqlTask
                  deploymentAction: 'publish' # Required when deployType == DacpacTask. Options: publish, extract, export, import, script, driftReport, deployReport
                  dacpacFile: '$(Pipeline.Workspace)/dropDacpac/Tailspin.SpaceGame.Database/bin/Debug/Tailspin.SpaceGame.Database.dacpac' # Required when deploymentAction == Publish || DeploymentAction == Script || DeploymentAction == DeployReport
                  #bacpacFile: # Required when deploymentAction == Import
                  #sqlFile: # Required when deployType == SqlTask
                  #sqlInline: # Required when deployType == InlineSqlTask
                  #publishProfile: # Optional
                  #additionalArguments: # Optional
                  #sqlAdditionalArguments: # Optional
                  #inlineAdditionalArguments: # Optional
                  ipDetectionMethod: 'AutoDetect' # Options: autoDetect, iPAddressRange
                  #startIpAddress: # Required when ipDetectionMethod == IPAddressRange
                  #endIpAddress: # Required when ipDetectionMethod == IPAddressRange
                  #deleteFirewallRule: true # Optional
            

    - stage: 'Dev'
      displayName: 'Deploy DEV web application'
      dependsOn: DBAVerificationApply
      condition: and (succeeded() , eq(variables['Build.SourceBranchName'],variables['releaseBranchName']) )
      jobs:
        - deployment: DeployWeb
          displayName: 'Deployment of Space Game web application'
          pool:
            vmImage: 'Ubuntu-18.04'
          environment: 'dev'
          variables:
            - group : Release
          strategy:
           runOnce:
             deploy:
               steps:
                 - download: current
                   artifact: drop
                 - task: AzureWebApp@1
                   displayName: 'Azure App Service Deploy : WebSite' 
                   inputs:
                     appType: webAppLinux
                     azureSubscription: 'Space-game-azurerm-connection'
                     appName: '$(webAppNameDEV)'
                     package: '$(Pipeline.Workspace)/drop/$(buildconfiguration)/*.zip'
    - stage: 'ASM'
      displayName: 'Deploy ASM web application'
      dependsOn: dev
      # condition: and (succeeded() , eq(variables['Build.SourceBranchName'],variables['releaseBranchName']) )
      jobs:
        - deployment: DeployWeb
          displayName: 'Deployment of Space Game web application'
          pool:
            vmImage: 'Ubuntu-18.04'
          environment: 'asm'
          variables:
            - group : Release
          strategy:
           runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop
                - task: AzureWebApp@1
                  displayName: 'Azure App Service Deploy : WebSite' 
                  inputs:
                    appType: webAppLinux
                    azureSubscription: 'Space-game-azurerm-connection'
                    appName: '$(webAppNameASM)'
                    package: '$(Pipeline.Workspace)/drop/$(buildconfiguration)/*.zip'
     
    - stage: 'INT'
      displayName: 'Deploy INT web application'
      dependsOn: asm
      # condition: and (succeeded() , eq(variables['Build.Reason'],'Schedule') )
      jobs:
      - deployment: DeployWeb
        displayName: 'Deployment of Space Game web application'
        pool:
          vmImage: 'Ubuntu-18.04'
        environment: 'int'
        variables:
          - group : Release
        strategy:
          runOnce:
           deploy:
            steps:
              - download: current
                artifact: drop
              - task: AzureWebApp@1
                displayName: 'Azure App Service Deploy : WebSite' 
                inputs:
                  appType: webAppLinux
                  azureSubscription: 'Space-game-azurerm-connection'
                  appName: '$(webAppNameINT)'
                  package: '$(Pipeline.Workspace)/drop/$(buildconfiguration)/*.zip'
  
    - stage: 'UAT'
      displayName: 'Deploy UAT web application'
      dependsOn: int
      # condition: and (succeeded() , eq(variables['Build.SourceBranchName'],variables['releaseBranchName']) )
      jobs:
      - deployment: DeployWeb
        displayName: 'Deployment of Space Game web application'
        pool:
          vmImage: 'Ubuntu-18.04'
        environment: 'uat'
        variables:
          - group : Release
        strategy:
          runOnce:
           deploy:
            steps:
              - download: current
                artifact: drop
              - task: AzureWebApp@1
                displayName: 'Azure App Service Deploy : WebSite' 
                inputs:
                  appType: webAppLinux
                  azureSubscription: 'Space-game-azurerm-connection'
                  appName: '$(webAppNameUAT)'
                  package: '$(Pipeline.Workspace)/drop/$(buildconfiguration)/*.zip'
  
