trigger:
- '*'

variables:
  buildConfiguration: 'Release'
  dotnetSdkVersion: '3.1.300'

schedules:
    - cron: '0 3 * * *'
      displayName: Deploy every day at 3.0 AM GMT
      branches:
        include:
          - release-pipeline-jy
          - database 
      #always: false
  
stages:
    - stage: 'Build'
      displayName: 'Build the web application'
      variables:     
        wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
        dotnetSdkVersion: '3.1.300'
      jobs:
        - job: 'build' 
          displayName: 'Job Build web App'
          pool:        
            vmImage: 'ubuntu-18.04'
            demands:
              - npm
          steps:
          - task: UseDotNet@2
            displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
            inputs:
               version: '$(dotnetSdkVersion)'
  
          - task: Npm@1
            displayName: 'Run npm install'
            inputs:
               verbose: false
  
          - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
            displayName: 'Compile Sass assets'
  
          - task: gulp@1
            displayName: 'Run gulp tasks'
  
          - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
            displayName: 'Write build info'
            workingDirectory: $(wwwrootDir)
  
          - task: DotNetCoreCLI@2
            displayName: 'Restore project dependencies'
            inputs:
                command: 'restore'
                projects: '**/*.csproj'
  
          - task: DotNetCoreCLI@2
            displayName: 'Build the project - $(buildConfiguration)'
            inputs:
               command: 'build'
               arguments: '--no-restore --configuration $(buildConfiguration)'
               projects: '**/*.csproj'
  
          - task: DotNetCoreCLI@2
            displayName: 'Publish the project - $(buildConfiguration)'
            inputs:
               command: 'publish'
               projects: '$(System.DefaultWorkingDirectory)/**/Tailspin.SpaceGame.Web.csproj' # '**/*.csproj'
               publishWebProjects: false
               arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
               zipAfterPublish: true
  
          - publish: '$(Build.ArtifactStagingDirectory)'
            artifact: drop
        - job: 'BuildDacPac'          
          pool: 
            vmImage: 'windows-2019'
          steps:
            # Restore project dependencies
            - task: DotNetCoreCLI@2
              displayName: 'Restore database projets dependencies'
              timeoutInMinutes: 120
              inputs:
                  command: restore
                  projects: '**/*.sqlproj'

            # Build Project with MS Build
            - task: VSBuild@1
              displayName: 'Build database projets with @MsBuild'
              timeoutInMinutes: 120
              inputs:
                solution: '**/*.sqlproj'
                
            # Copy Files to staging Directory
            - task: CopyFiles@2
              displayName: 'Copy database Files to Target Folder'
              timeoutInMinutes: 120
              inputs:   
                 Contents: 'Tailspin.SpaceGame.Database/bin/**/*.dacpac'
                 TargetFolder: '$(Build.StagingDirectory)'

            # Publish Artifact
            - task: PublishBuildArtifacts@1
              displayName: 'Publish Database Artifact'
              inputs:
                PathtoPublish: '$(Build.ArtifactStagingDirectory)'
                ArtifactName: dropDacpac
              condition: succeededOrFailed()

    - stage: 'DBAVerificationScript'
      displayName: 'script database schema changes'
      #condition: eq(1,2)
      dependsOn: Build
      jobs:
        - deployment: DBAVerificationScript
          pool: 
            vmImage: 'windows-2019'
          variables:
            - group: Release
          environment: 'dbaVerificationScript'
          strategy: 
            runOnce:              
              deploy:   
                steps:
                 - download: current
                   artifact: dropDacpac
                   patterns: '**/*'
                 - task: SqlAzureDacpacDeployment@1
                   displayName: 'Generate Schema Script'
                   inputs:
                     azureConnectionType: 'ConnectedServiceNameARM' # Optional. Options: connectedServiceName, connectedServiceNameARM
                     #azureClassicSubscription: # Required when azureConnectionType == ConnectedServiceName
                     azureSubscription: 'Space-game-azurerm-connection' # Required when azureConnectionType == ConnectedServiceNameARM
                     authenticationType: 'server' # Options: server, aadAuthenticationPassword, aadAuthenticationIntegrated, connectionString
                     serverName: '$(servername).database.windows.net' # Required when authenticationType == Server || AuthenticationType == AadAuthenticationPassword || AuthenticationType == AadAuthenticationIntegrated
                     databaseName: '$(databasename)' # Required when authenticationType == Server || AuthenticationType == AadAuthenticationPassword || AuthenticationType == AadAuthenticationIntegrated
                     sqlUsername: '$(adminlogin)' # Required when authenticationType == Server
                     sqlPassword: '$(adminPassword)' # Required when authenticationType == Server
                     #aadSqlUsername: # Required when authenticationType == AadAuthenticationPassword
                     #aadSqlPassword: # Required when authenticationType == AadAuthenticationPassword
                     #connectionString: # Required when authenticationType == ConnectionString
                     deployType: 'DacpacTask' # Options: dacpacTask, sqlTask, inlineSqlTask
                     deploymentAction: 'script' # Required when deployType == DacpacTask. Options: publish, extract, export, import, script, driftReport, deployReport
                     dacpacFile: '$(Pipeline.Workspace)/dropDacpac/Tailspin.SpaceGame.Database/bin/Debug/Tailspin.SpaceGame.Database.dacpac' # Required when deploymentAction == Publish || DeploymentAction == Script || DeploymentAction == DeployReport
                     #bacpacFile: # Required when deploymentAction == Import
                     #sqlFile: # Required when deployType == SqlTask
                     #sqlInline: # Required when deployType == InlineSqlTask
                     #publishProfile: # Optional
                     #additionalArguments: # Optional
                     #sqlAdditionalArguments: # Optional
                     #inlineAdditionalArguments: # Optional
                     ipDetectionMethod: 'AutoDetect' # Options: autoDetect, iPAddressRange
                     #startIpAddress: # Required when ipDetectionMethod == IPAddressRange
                     #endIpAddress: # Required when ipDetectionMethod == IPAddressRange
                     #deleteFirewallRule: true # Optional

                 - task: PowerShell@2
                   displayName: 'Show Auto Generated SQl Script and check Database Schema changes'
                   inputs:
                     targetType: inline
                     script: |
                       # Prnt schema change
                       Write-Host "Auto Generated SQ Update Script"
                       Get-Content d:\a\1\s\GeneratedOutputFiles\$(databasename)_Script.sql  | foreach { Write-Output $_}

                       # Check for schema changes
                       $file = Get-Content "d:\a\1\s\GeneratedOutputFiles\$(databasename)_Script.sql"
                       $containsKeyWord = $file | %{$_ -match "CREATE" -or $_ -match "ALTER" -or $_ -match "DROP"}
                       if ($containsKeyWord -contains $true)
                           {
                           Install-Module VSTeam -Scope CurrentUser -Force
                           Set-VSTeamAccount -Account $(Acct) -PersonalAccessToken $(PAT)
                           $methodParameters = @{
                                          ProjectName = "$(System.TeamProject)"
                                          Name = "Release" }
                            $vg = Get-VSTeamVariableGroup @methodParameters
                            $vars = @{}
                            $vg.variables | Get-Member -MemberType *Property | %{$vars.($_.Name) = $vg.variables.($_.Name)}
                            $varName = "schemaChanged"
                            $vars.$varName = @{}
                            $vars.$varName.value = "True"
                            $vars.$varName.isSecret = $false
                            $methodParameters = @{
                             id = $vg.id
                             ProjectName = "$(System.TeamProject)"
                             Name = "Release"
                             Description = ""
                             Type = "Vsts"
                             Variables = $vars
                            }
                         Update-VSTeamVariableGroup @methodParameters
                           }
             
    - stage: 'DBAVerificationApply'
      displayName: 'Apply script database schema'      
      variables:
         - group: 'Release'
      dependsOn: DBAVerificationScript
      condition: and(succeeded('DBAVerificationScript'),eq(variables['schemaChanged'],True))
      jobs:
      - deployment: DBAVerificationApply
        pool: 
          vmImage: 'windows-2019'
        variables:
          - group: Release
        environment: 'dbaVerificationApply'
        strategy: 
          runOnce:              
            deploy:   
              steps:
              - download: current
                artifact: dropDacpac
                patterns: '**/*'
              - task: SqlAzureDacpacDeployment@1
                displayName: 'Apply Schema Script'
                inputs:
                  azureConnectionType: 'ConnectedServiceNameARM' # Optional. Options: connectedServiceName, connectedServiceNameARM
                  #azureClassicSubscription: # Required when azureConnectionType == ConnectedServiceName
                  azureSubscription: 'Space-game-azurerm-connection' # Required when azureConnectionType == ConnectedServiceNameARM
                  authenticationType: 'server' # Options: server, aadAuthenticationPassword, aadAuthenticationIntegrated, connectionString
                  serverName: '$(servername).database.windows.net' # Required when authenticationType == Server || AuthenticationType == AadAuthenticationPassword || AuthenticationType == AadAuthenticationIntegrated
                  databaseName: '$(databasename)' # Required when authenticationType == Server || AuthenticationType == AadAuthenticationPassword || AuthenticationType == AadAuthenticationIntegrated
                  sqlUsername: '$(adminlogin)' # Required when authenticationType == Server
                  sqlPassword: '$(adminPassword)' # Required when authenticationType == Server
                  #aadSqlUsername: # Required when authenticationType == AadAuthenticationPassword
                  #aadSqlPassword: # Required when authenticationType == AadAuthenticationPassword
                  #connectionString: # Required when authenticationType == ConnectionString
                  deployType: 'DacpacTask' # Options: dacpacTask, sqlTask, inlineSqlTask
                  deploymentAction: 'publish' # Required when deployType == DacpacTask. Options: publish, extract, export, import, script, driftReport, deployReport
                  dacpacFile: '$(Pipeline.Workspace)/dropDacpac/Tailspin.SpaceGame.Database/bin/Debug/Tailspin.SpaceGame.Database.dacpac' # Required when deploymentAction == Publish || DeploymentAction == Script || DeploymentAction == DeployReport
                  #bacpacFile: # Required when deploymentAction == Import
                  #sqlFile: # Required when deployType == SqlTask
                  #sqlInline: # Required when deployType == InlineSqlTask
                  #publishProfile: # Optional
                  #additionalArguments: # Optional
                  #sqlAdditionalArguments: # Optional
                  #inlineAdditionalArguments: # Optional
                  ipDetectionMethod: 'AutoDetect' # Options: autoDetect, iPAddressRange
                  #startIpAddress: # Required when ipDetectionMethod == IPAddressRange
                  #endIpAddress: # Required when ipDetectionMethod == IPAddressRange
                  #deleteFirewallRule: true # Optional

              - task: PowerShell@2
                displayName: 'Remove "schemaChanged" pipeline variable'
                inputs:
                  targetType: 'inline'
                  script: | 
                   Install-Module VSTeam -Scope CurrentUser -Force
                   Set-VSTeamAccount –Account $(Acct) -PersonalAccessToken $(PAT)
                   $methodParameters = @{
                     ProjectName = "$(System.TeamProject)"
                     Name = "Release"}
                   $vg = Get-VSTeamVariableGroup  @methodParameters 
                   $vars = @{}
                   $vg.variables | Get-Member -MemberType *Property | %{$vars.($_.Name) = $vg.variables.($_.Name)}
                   $vars.Remove("schemaChanged")
                   $methodParameters = @{
                     id = $vg.id
                     ProjectName = "$(System.TeamProject)"
                     Name = "Release"
                     Description = ""
                     Type = "Vsts"
                     Variables = $vars}
                    Update-VSTeamVariableGroup @methodParameters
    - stage: 'Provision'
      displayName: 'Provisionning Stage '
      dependsOn: Build      
      variables: 
        - group: Release
      jobs: 
        - job: Provisionning
          displayName: 'Provisioning infra Job'  # friendly name to display in the UI'       
          variables: 
            - group: Release
          pool:
            vmImage: 'ubuntu-latest'
          steps:
            - script: |
                # Exit when any commands returns a failure status
                 set -e 

                # create and write terraform.tvars  
                 echo 'resource_group_location = "'$(ResourceGroupLocation)'"' | tee terraform.tfvars
              
                 # create and write backend.tfvars
                 echo 'resource_group_name = "tf-storage-rg"' | tee backend.tfvars
                 echo 'storage_account_name = "'$(StorageAccountName)'"' | tee -a backend.tfvars
                 echo 'container_name = "tfstate"' | tee -a backend.tfvars
                 echo 'key = "tf.terraform.tfstate"' | tee -a backend.tfvars

                 # terraform init
                   terraform init -input=false -backend-config="backend.tfvars"
                
                 # terraform apply with auto approve
                   terraform apply -input=false -auto-approve

                 # terraform retrieve output  and set pipeline variable
                   WebAppNameDev=$(terraform output appservice_name_dev) 
                   WebAppNameAsm=$(terraform output appservice_name_asm)
                   WebAppNameInt=$(terraform output appservice_name_int)
                   WebAppNameUat=$(terraform output appservice_name_uat)

                 #  bash set variable
                   echo "##vso[task.setvariable variable=WebAppNameDev;isOutput=true]$WebAppNameDev"
                   echo "##vso[task.setvariable variable=WebAppNameAsm;isOutput=true]$WebAppNameAsm"
                   echo "##vso[task.setvariable variable=WebAppNameInt;isOutput=true]$WebAppNameInt"
                   echo "##vso[task.setvariable variable=WebAppNameUat;isOutput=true]$WebAppNameUat"
              name: 'RunTerraform'
              displayName: 'Run Terraform'
              env:
               ARM_CLIENT_ID: $(ARM_CLIENT_ID)
               ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
               ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
               ARM_TENANT_ID: $(ARM_TENANT_ID)
    

    - stage: 'Dev'
      displayName: 'Deploy DEV web application'      
      dependsOn: 
        - DBAVerificationScript
        - DBAVerificationApply
        - Provision
      condition: | 
          and(
          succeeded('DBAVerificationScript') , in(dependencies.DBAVerificationApply.result,'Succeeded','Skipped')
          )
       # condition: and (succeeded() , eq(variables['Build.SourceBranchName'],variables['releaseBranchName']) )
      jobs:
        - deployment: DeployWeb
          displayName: 'Deployment of Space Game web application'
          pool:
            vmImage: 'Ubuntu-18.04'
          environment: 'dev'
          variables:            
             WebAppNameDev: $[stageDependencies.Provision.Provisionning.outputs['RunTerraform.WebAppNameDev']]
          strategy:
           runOnce:
             deploy:
               steps:
                 - download: current
                   artifact: drop
                 - task: AzureWebApp@1
                   displayName: 'Azure App Service Deploy : WebSite ' 
                   inputs:
                     appType: webAppLinux
                     azureSubscription: 'Space-game-azurerm-connection'
                     appName: '$(WebAppNameDev)'
                     package: '$(Pipeline.Workspace)/drop/$(buildconfiguration)/*.zip'
    - stage: 'ASM'
      displayName: 'Deploy ASM web application'      
      dependsOn: 
         - Dev
         - Provision
      # condition: and (succeeded() , eq(variables['Build.SourceBranchName'],variables['releaseBranchName']) )
      jobs:
        - deployment: DeployWeb
          displayName: 'Deployment of Space Game web application'
          pool:
            vmImage: 'Ubuntu-18.04'
          environment: 'asm'
          variables:
            WebAppNameAsm: $[stageDependencies.Provision.Provisionning.outputs['RunTerraform.WebAppNameAsm']]
          strategy:
           runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop
                - task: AzureWebApp@1
                  displayName: 'Azure App Service Deploy : WebSite' 
                  inputs:
                    appType: webAppLinux
                    azureSubscription: 'Space-game-azurerm-connection'
                    appName: '$(WebAppNameAsm)'
                    package: '$(Pipeline.Workspace)/drop/$(buildconfiguration)/*.zip'
        
        - job: RunUITests
          dependsOn: DeployWeb
          condition: eq(1,2)
           #continueOnError: False
          displayName: 'Run Ui Tests'
          pool:
            vmImage: 'windows-2019'
          variables:
            - group : Release
          steps:
             # Use Dotnet version
             - task: UseDotNet@2
               displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
               inputs:
                  version: '$(dotnetSdkVersion)'

             # restore projects dependencies
             - task: DotNetCoreCLI@2
               displayName: 'Restore UI Tests project dependencies'
               inputs:
                  command: 'restore'
                  projects: '$(System.DefaultWorkingDirectory)/**/Tailspin.SpaceGame.Web.UITests.csproj'
             # Build test projects
             - task: DotNetCoreCLI@2
               displayName: 'Build UI Tests project - $(buildConfiguration)'
               inputs:
                 command: 'build'
                 arguments: '--configuration $(buildConfiguration)'
                 projects: '$(System.DefaultWorkingDirectory)/**/Tailspin.SpaceGame.Web.UITests.csproj'
             # Run test
             - task: DotNetCoreCLI@2
               displayName: 'Run UI Tests  - $(buildConfiguration)'
               inputs:
                command: 'test'
                arguments: ' --no-build --configuration $(buildConfiguration) ' #'--no-restore --configuration $(buildConfiguration)'
                projects: '$(System.DefaultWorkingDirectory)/**/Tailspin.SpaceGame.Web.UITests.csproj'
        
        - job: RunloadTests  # name of the job (A-Z, a-z, 0-9, and underscore)
          displayName: 'Run Jmeter Load Tests'  # friendly name to display in the UI
          dependsOn: DeployWeb
          condition: eq(1,1)         
          continueOnError: False  # 'true' if future jobs should run even if this job fails; defaults to 'false'
          pool: 
            vmImage: 'ubuntu-18.04'                          
          variables: 
            - group: Release
          steps: #[ script | bash | pwsh | powershell | checkout | task | templateReference ]
            - script: |
                 wget -c -t 6 -S ftp.ps.pl/pub/apache/jmeter/binaries/apache-jmeter-$(jmeterVersion).tgz
                 tar -xf apache-jmeter-$(jmeterVersion).tgz
              displayName: 'Install Apache JMeter'
            - script: apache-jmeter-$(jmeterVersion)/bin/./jmeter -n -t LoadTest.jmx -o Results.xml -Jhostname=$(ASM_HOSTNAME)
              displayName: 'Run Load tests'
            - script: |
                 sudo apt-get update
                 sudo apt-get install xsltproc
                 xsltproc JMeter2JUnit.xsl Results.xml > JUnit.xml
              displayName: 'Transform JMeter output to JUnit'
            - task: PublishTestResults@2
              inputs:
                testResultsFormat: JUnit
                testResultsFiles: JUnit.xml
         
    - stage: 'INT'
      displayName: 'Deploy INT web application'
      dependsOn: ASM
      condition: eq(1,2)
      # condition: and (succeeded() , eq(variables['Build.Reason'],'Schedule') )
      jobs:
      - deployment: DeployWeb
        displayName: 'Deployment of Space Game web application'
        pool:
          vmImage: 'Ubuntu-18.04'
        environment: 'int'
        variables:
          WebAppNameInt: $[stageDependencies.Provision.Provisionning.outputs['RunTerraform.WebAppNameInt']]
        strategy:
          runOnce:
           deploy:
            steps:
              - download: current
                artifact: drop
              - task: AzureWebApp@1
                displayName: 'Azure App Service Deploy : WebSite' 
                inputs:
                  appType: webAppLinux
                  azureSubscription: 'Space-game-azurerm-connection'
                  appName: '$(WebAppNameInt)'
                  package: '$(Pipeline.Workspace)/drop/$(buildconfiguration)/*.zip'
                  deployToSlotOrASE: true
                  resourceGroupName: 'space-game-rg'
                  slotName: 'swap'
              
                  # Azure App Service manage
              - task: AzureAppServiceManage@0
                inputs:
                  # Start, stop, restart, slot swap, slot delete, install site extensions or enable continuous monitoring for an Azure App Service
                  azureSubscription: 'Space-game-azurerm-connection'
                  action: 'Swap Slots' # Optional. Options: swap Slots, start Azure App Service, stop Azure App Service, restart Azure App Service, delete Slot, install Extensions, enable Continuous Monitoring, start All Continuous Webjobs, stop All Continuous Webjobs
                  webAppName: '$(WebAppNameInt)'
                  #specifySlotOrASE: false # Optional
                  resourceGroupName: 'space-game-rg' # Required when action == Swap Slots || Action == Delete Slot || SpecifySlot == True
                  sourceSlot: 'swap' # Required when action == Swap Slots
                  swapWithProduction: true # Optional
                  #targetSlot: # Required when action == Swap Slots && SwapWithProduction == False
                  #preserveVnet: false # Optional
                  #slot: 'production' # Required when action == Delete Slot || SpecifySlot == True
                  #extensionsList: # Required when action == Install Extensions
                  #outputVariable: # Optional
                  #appInsightsResourceGroupName: # Required when action == Enable Continuous Monitoring
                  #applicationInsightsResourceName: # Required when action == Enable Continuous Monitoring
                  #applicationInsightsWebTestName: # Optional

    - stage: 'UAT'
      displayName: 'Deploy UAT web application'      
      dependsOn: INT
      condition: eq(1,2)
      # condition: and (succeeded() , eq(variables['Build.SourceBranchName'],variables['releaseBranchName']) )
      jobs:
      - deployment: DeployWeb
        displayName: 'Deployment of Space Game web application'
        pool:
          vmImage: 'Ubuntu-18.04'
        environment: 'uat'
        variables:
          WebAppNameUat: $[stageDependencies.Provision.Provisionning.outputs['RunTerraform.WebAppNameUat']]
        strategy:
          runOnce:
           deploy:
            steps:
              - download: current
                artifact: drop
              - task: AzureWebApp@1
                displayName: 'Azure App Service Deploy : WebSite' 
                inputs:
                  appType: webAppLinux
                  azureSubscription: 'Space-game-azurerm-connection'
                  appName: '$(WebAppNameUat)'
                  package: '$(Pipeline.Workspace)/drop/$(buildconfiguration)/*.zip'
  
